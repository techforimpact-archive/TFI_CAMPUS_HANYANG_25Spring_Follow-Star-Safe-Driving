// src/main.tsx - simpleImagePreloader Î≥ÄÍ≤ΩÏóê ÎßûÏ∂ò ÏàòÏ†ïÎ≥∏
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import { BrowserRouter } from 'react-router-dom'
import { CharacterProvider } from './context/CharacterContext'
import { simpleImagePreloader, imagePaths } from './utils/simpleImagePreloader'
import { setupViewportHeightVar } from './utils/viewportUtils';

setupViewportHeightVar();

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <BrowserRouter>
      <CharacterProvider>
        <App />
      </CharacterProvider>
    </BrowserRouter>
  </React.StrictMode>,
)

if (process.env.NODE_ENV === 'development') {
  (window as any).imageDebug = {
    status: () => {
      const loadedImages = imagePaths.filter((src: string) => simpleImagePreloader.isLoaded(src));
      
      console.group('üñºÔ∏è Ïù¥ÎØ∏ÏßÄ Î°úÎî© ÏÉÅÌÉú');
      console.log(`Ï†ÑÏ≤¥: ${loadedImages.length}/${imagePaths.length} loaded (${((loadedImages.length / imagePaths.length) * 100).toFixed(1)}%)`);
      console.log('‚úÖ Î°úÎî© ÏôÑÎ£å:', loadedImages.slice(0, 10)); // Ï≤òÏùå 10Í∞úÎßå ÌëúÏãú
      
      const notLoaded = imagePaths.filter((src: string) => !simpleImagePreloader.isLoaded(src));
      if (notLoaded.length > 0) {
        console.warn(`‚ùå Î°úÎî© Ïã§Ìå®/ÎåÄÍ∏∞ Ï§ë (${notLoaded.length}Í∞ú):`, notLoaded.slice(0, 5)); // Ï≤òÏùå 5Í∞úÎßå ÌëúÏãú
      }
      console.groupEnd();
      
      return {
        loaded: loadedImages.length,
        total: imagePaths.length,
        percentage: ((loadedImages.length / imagePaths.length) * 100).toFixed(1)
      };
    },
    
    clear: () => {
      simpleImagePreloader.clearCache();
      console.log('üóëÔ∏è Ïù¥ÎØ∏ÏßÄ Ï∫êÏãú ÌÅ¥Î¶¨Ïñ¥ ÏôÑÎ£å');
    },
    
    check: (src: string) => {
      const isLoaded = simpleImagePreloader.isLoaded(src);
      const image = simpleImagePreloader.getImage(src);
      
      console.log(`üîç Ïù¥ÎØ∏ÏßÄ Ï≤¥ÌÅ¨: ${src}`);
      console.log(`  - Î°úÎî©Îê®: ${isLoaded}`);
      console.log(`  - Ï∫êÏãúÎê®: ${!!image}`);
      
      if (image) {
        console.log(`  - ÌÅ¨Í∏∞: ${image.naturalWidth}x${image.naturalHeight}`);
      }
      
      return { loaded: isLoaded, cached: !!image, element: image };
    },
    
    test: async () => {
      console.log('‚ö° Ïù¥ÎØ∏ÏßÄ Î°úÎî© ÏÑ±Îä• ÌÖåÏä§Ìä∏ ÏãúÏûë...');
      
      const testImages = imagePaths.slice(0, 5); // Ï≤òÏùå 5Í∞ú Ïù¥ÎØ∏ÏßÄÎ°ú ÌÖåÏä§Ìä∏
      
      const startTime = Date.now();
      
      try {
        await Promise.all(testImages.map((src: string) => simpleImagePreloader.loadImage(src)));
        const endTime = Date.now();
        console.log(`‚úÖ ÌÖåÏä§Ìä∏ ÏôÑÎ£å: ${endTime - startTime}ms`);
      } catch (error) {
        console.error('‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìå®:', error);
      }
    },
    
    viewport: () => {
      console.group('üì± Î∑∞Ìè¨Ìä∏ Ï†ïÎ≥¥');
      console.log(`window.innerHeight: ${window.innerHeight}px`);
      console.log(`window.innerWidth: ${window.innerWidth}px`);
      console.log(`document.documentElement.clientHeight: ${document.documentElement.clientHeight}px`);
      console.log(`document.documentElement.clientWidth: ${document.documentElement.clientWidth}px`);
      
      if (window.visualViewport) {
        console.log(`visualViewport.height: ${window.visualViewport.height}px`);
        console.log(`visualViewport.width: ${window.visualViewport.width}px`);
      } else {
        console.log('visualViewport: ÏßÄÏõêÎêòÏßÄ ÏïäÏùå');
      }
      
      const vh = getComputedStyle(document.documentElement).getPropertyValue('--vh');
      console.log(`CSS --vh Î≥ÄÏàò: ${vh}`);
      
      console.groupEnd();
    },
    
    help: () => {
      console.log(`
üñºÔ∏è Ïù¥ÎØ∏ÏßÄ ÎîîÎ≤ÑÍπÖ ÎèÑÍµ¨ ÏÇ¨Ïö©Î≤ï:

window.imageDebug.status()     - ÌòÑÏû¨ Î°úÎî© ÏÉÅÌÉú ÌôïÏù∏
window.imageDebug.clear()      - Ï∫êÏãú ÌÅ¥Î¶¨Ïñ¥
window.imageDebug.check(url)   - ÌäπÏ†ï Ïù¥ÎØ∏ÏßÄ ÏÉÅÌÉú ÌôïÏù∏
window.imageDebug.test()       - ÏÑ±Îä• ÌÖåÏä§Ìä∏
window.imageDebug.viewport()   - Î∑∞Ìè¨Ìä∏ Ï†ïÎ≥¥ ÌôïÏù∏
window.imageDebug.help()       - Ïù¥ ÎèÑÏõÄÎßê

ÏòàÏãú:
window.imageDebug.status()
window.imageDebug.check('/assets/images/background.png')
window.imageDebug.viewport()
      `);
    }
  };
  
  setTimeout(() => {
    console.log('üöÄ Ïù¥ÎØ∏ÏßÄ ÌîÑÎ¶¨Î°úÎçî Î∞è Î∑∞Ìè¨Ìä∏ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    console.log('üí° window.imageDebug.help() ÏûÖÎ†•ÏúºÎ°ú ÏÇ¨Ïö©Î≤ï ÌôïÏù∏');
    (window as any).imageDebug.status();
    (window as any).imageDebug.viewport();
  }, 2000);
  
  setInterval(() => {
    const loaded = imagePaths.filter((src: string) => simpleImagePreloader.isLoaded(src));
    const percentage = (loaded.length / imagePaths.length) * 100;
    if (percentage < 80) { // 80% ÎØ∏ÎßåÏùº ÎïåÎßå Í≤ΩÍ≥†
      console.warn(`‚ö†Ô∏è Ïù¥ÎØ∏ÏßÄ Î°úÎî© ÏßÑÌñâÎ•†: ${percentage.toFixed(1)}% (${loaded.length}/${imagePaths.length})`);
    }
  }, 30000);
}